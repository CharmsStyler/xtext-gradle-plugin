description 'A plugin for invoking Xtext base Code generators'

apply plugin: 'nebula.facet'
apply plugin: 'org.xtext.xtend'
apply plugin: 'java-gradle-plugin'
apply plugin: 'com.gradle.plugin-publish'
apply plugin: 'maven-publish'

group = 'org.xtext'
version = findProperty('releaseVersion')

facets {
	integTest {
		parentSourceSet = 'test'
		testTaskName = 'minimumIntegrationTest'
	}
}

gradlePlugin {
	plugins {
		xtext {
			id = "org.xtext.builder"
			displayName = "Xtext Gradle Plugin"
			description = "A Gradle plugin for generating code with Xtext"
			implementationClass = "org.xtext.gradle.XtextBuilderPlugin"
		}
		xtend {
			id = "org.xtext.xtend"
			displayName = "Xtend Gradle Plugin"
			description = "A Gradle plugin for the Xtend language"
			implementationClass = "org.xtext.gradle.XtendLanguagePlugin"
		}
	}
	testSourceSets sourceSets.integTest
}

pluginBundle {
	website = 'https://www.eclipse.org/Xtext/'
	vcsUrl = 'https://github.com/xtext/xtext-gradle-plugin'
	description = 'Gradle plugins for generating code with Xtext/Xtend'
	tags = ['Xtext', 'Xtend', 'DSL']
}

configurations {
	builder {
		transitive = false
	}
	protocol {
		transitive = false
	}
	compileClasspath {
		extendsFrom protocol
	}
	testImplementation {
		extendsFrom protocol
	}
}

dependencies {
	builder project(':xtext-gradle-builder')
	implementation "org.eclipse.xtend:org.eclipse.xtend.lib:$minimumXtextVersion"
	implementation 'com.google.guava:guava:27.1-jre'
	implementation 'org.eclipse.platform:org.eclipse.equinox.preferences:3.6.1'
	implementation 'org.eclipse.platform:org.eclipse.equinox.common:3.8.0'
	implementation 'org.osgi:org.osgi.framework:1.8.0'
	implementation('org.apache.maven:maven-artifact:3.8.2') {
		transitive = false
	}
	protocol project(':xtext-gradle-protocol')
	testImplementation 'org.ow2.asm:asm:9.4'
}

javadoc.dependsOn generateXtext

processResources {
	inputs.files(configurations.protocol)
	from(configurations.builder) {
		rename {
			"xtext-gradle-builder.jar"
		}
	}
	from({zipTree(configurations.protocol.singleFile)})
}

tasks.withType(Test) {
	def testkitDir = System.getenv("CI") ? gradle.gradleUserHomeDir : "$rootDir/testkit-dir"
	systemProperty 'gradle.project.version', version
	systemProperty 'org.gradle.testkit.dir', testkitDir
}

minimumIntegrationTest {
	reports.html.destination = file("$testReportDir/$name")
	reports.junitXml.destination = file("$testResultsDir/$name")
	systemProperty 'gradle.version', minimumGradleVersion
	systemProperty 'xtext.version', minimumXtextVersion
}

task latestIntegrationTest(type: Test) {
	classpath = minimumIntegrationTest.classpath
	testClassesDirs = minimumIntegrationTest.testClassesDirs
	systemProperty 'gradle.version', latestGradleVersion
	systemProperty 'xtext.version', latestXtextVersion
	javaLauncher.set(javaToolchains.launcherFor {
        languageVersion.set(JavaLanguageVersion.of(17))
    })
}

check.dependsOn(latestIntegrationTest)
